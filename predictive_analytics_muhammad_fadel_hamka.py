# -*- coding: utf-8 -*-
"""Predictive Analytics - Muhammad Fadel Hamka.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P5tFcwEJI9Esx9v3JtRM20F2mOBOm6k2

# **1. Import Library & Load Dataset**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# URL ke file CSV mentah di GitHub
url = 'https://raw.githubusercontent.com/Fadelhamkaa/Predictive-Analytics-Dicoding/main/DailyDelhiClimateTrain.csv'

# Membaca dataset
df = pd.read_csv(url)

# Menampilkan beberapa baris pertama dari dataset
print(df.head())

"""# **2. Data Understanding**"""

# Info dataset
df.info()

# Statistik deskriptif
df.describe()

# Cek missing value
df.isnull().sum()

# Convert kolom 'date' ke tipe datetime
df['date'] = pd.to_datetime(df['date'])

# Set sebagai index jika ingin analisis time series (opsional)
# df.set_index('date', inplace=True)

"""# **3. Exploratory Data Analysis (EDA)**"""

# Korelasi antar fitur
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Korelasi Antar Fitur")
plt.show()

# Visualisasi tren suhu harian
plt.figure(figsize=(10, 4))
plt.plot(df['date'], df['meantemp'])
plt.title("Tren Suhu Rata-Rata Harian (meantemp)")
plt.xlabel("Tanggal")
plt.ylabel("Suhu (°C)")
plt.grid()
plt.show()

"""# **4. Data Preparation**"""

# Fitur dan target
X = df[['humidity', 'wind_speed', 'meanpressure']]
y = df['meantemp']

# Split data: 80% train, 20% test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

"""# **5. Modelling**

## **A. Linear Regression**
"""

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

y_pred_lr = lr_model.predict(X_test)

"""## **B. Decision Tree Regressor**"""

dt_model = DecisionTreeRegressor(random_state=42)
dt_model.fit(X_train, y_train)

y_pred_dt = dt_model.predict(X_test)

"""# **6. Evaluation**

## **Fungsi Evaluasi**
"""

# Fungsi evaluasi model
def evaluate_model(y_true, y_pred, model_name="Model"):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))  # RMSE manual
    r2 = r2_score(y_true, y_pred)

    print(f"Evaluasi {model_name}:")
    print(f"  - MAE  : {mae:.2f}")
    print(f"  - RMSE : {rmse:.2f}")
    print(f"  - R²   : {r2:.2f}")
    print("-" * 40)

# Evaluasi Linear Regression
evaluate_model(y_test, y_pred_lr, "Linear Regression")

# Evaluasi Decision Tree
evaluate_model(y_test, y_pred_dt, "Decision Tree Regressor")

"""# **7. Visualisasi Hasil Prediksi**"""

plt.figure(figsize=(10,5))
plt.plot(y_test.values[:50], label='Actual')
plt.plot(y_pred_lr[:50], label='Predicted - LinearReg', linestyle='--')
plt.plot(y_pred_dt[:50], label='Predicted - DecisionTree', linestyle=':')
plt.legend()
plt.title("Perbandingan Prediksi vs Aktual (50 Sampel Pertama)")
plt.xlabel("Index")
plt.ylabel("Mean Temperature")
plt.grid()
plt.show()